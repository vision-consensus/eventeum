server:
  tomcat:
    uri-encoding: UTF-8
  port: 8060

logging:
  level:
    org.springframework.web: ERROR
    net.consensys: DEBUG
    net.consensys.configs: ERROR
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c: %M - %m%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p %c: %M - %m%n"
  file: /logs/application.log

ethereum:
  nodes:
  - name: ${ETHEREUM_NODE_NAME:default}
#    url: ${ETHEREUM_NODE_URL:wss://mainnet.infura.io/ws/v3/6d00f1fc08d84be7a25d76996d16550b}
    url: ${ETHEREUM_NODE_URL:http://localhost:8545}
    blockStrategy: POLL
    syncingThreshold: 100
    healthcheckInterval: 5000
    maxBlocksToSync: 0
  healthcheck:
    pollInterval: 5000
  blockStrategy: POLL
  numBlocksToReplay: ${NUMBLOCKSTOREPLAY:12}
  sync:
    batchSize: 100000
  initialStartBlock: ${INITIAL_START_BLOCK:12000000}

#eventFilters:
#  - id: CryptoKittiesTransfer
#    contractAddress: "0x06012c8cf97bead5deae237070f9587f8e7a266d"
#    eventSpecification:
#      eventName: Transfer
#      nonIndexedParameterDefinitions:
#        - position: 0
#          type: ADDRESS
#        - position: 1
#          type: ADDRESS
#        - position: 2
#          type: UINT256
#
#    correlationId:
#      type: NON_INDEXED_PARAMETER
#      index: 2
#    startBlock: 10330000

#transactionFilters:
#- nodeName: ${ETHEREUM_NETWORK:default}
#  type: "TO_ADDRESS"
#  transactionIdentifierValue: "0x06012c8cf97bead5deae237070f9587f8e7a266d"

eventStore:
  type: DB
  url: http://localhost:8081/api/rest/v1
  eventPath: /event
  latestBlockPath: /latestblock
database:
  type: MONGO

broadcaster:
  type: KAFKA
  cache:
    expirationMillis: 6000000
  event:
    confirmation:
      numBlocksToWait: 12
      numBlocksToWaitForMissingTx: 100
      numBlocksToWaitBeforeInvalidating: 2
  multiInstance: false
  enableBlockNotifications: true

# For Kafka
zookeeper:
  address: ${ZOOKEEPER_ADDRESS:localhost:2181}
kafka:
  bootstrap:
    addresses: ${KAFKA_ADDRESSES:localhost:9092}
  topic:
    contractEvents: ${KAFKA_TOPIC_CONTRACT_EVENTS:contract-events}
    blockEvents: ${KAFKA_TOPIC_BLOCK_EVENTS:block-events}
    eventeumEvents: ${KAFKA_TOPIC_EVENTEUM_EVENTS:eventeum-events}
    transactionEvents: ${KAFKA_TOPIC_TRANSACTION_EVENTS:transaction-events}
    partitions: ${KAFKA_PARTITIONS:1}
    replicationSets: ${KAFKA_REPLICATION_SETS:1}
spring:
  data:
    mongodb:
      host: ${MONGO_HOST:127.0.0.1}
      port: ${MONGO_PORT:27017}
      database: ${MONGO_DB:test}
      ## if need auth, please uncomment and setup correctly
      username: ${MONGO_USERNAME:test}
      password: ${MONGO_PASSWORD:test}



management:
  endpoints:
    web.base-path: /monitoring
    enabled-by-default: false
    web.exposure.include: "*"
  endpoint:
    health:
      enabled: true
      show-details: always
    metrics:
      enabled: ${ENABLE_PROMETHEUS:false}
    prometheus:
      enabled: ${ENABLE_PROMETHEUS:false}
  metrics:
    export:
      prometheus:
        enabled: ${ENABLE_PROMETHEUS:false}

